<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>gCoder - 3D Printer Controller</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- p5.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.2/p5.min.js"></script>
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <!-- Include Navbar -->
  <%- include('partials/navbar') %>
  
  <!-- p5.js Script (if needed for custom visuals) -->
  <script>
    // Initialize p5.js if needed
    // For this example, we won't be using p5.js, but it's included for future extensions.
    function setup() {
      // No canvas needed
      noCanvas();
    }
    function loop() {}
  </script>

  <div class="container">
    <h1 class="mb-4">3D Printer Controller</h1>

    <!-- Serial Connection Section -->
    <div class="mb-4">
      <button id="connectButton" class="btn btn-primary">Connect to Printer</button>
      <span id="connectionStatus" class="ms-3">Disconnected</span>
    </div>

    <!-- Dashboard Section -->
    <div class="card mb-4" id="dashboard">
      <div class="card-header">
        Printer Dashboard
      </div>
      <div class="card-body">
        <div class="row mb-3">
          <div class="col-md-4">
            <strong>Status:</strong> <span id="printerStatus">Idle</span>
            <span id="statusIndicator" class="status-indicator bg-success"></span>
          </div>
          <div class="col-md-4">
            <strong>Printer Name:</strong> <span id="printerName">Unknown</span>
          </div>
          <div class="col-md-4">
            <strong>IP Address:</strong> <span id="printerIP">N/A</span>
          </div>
        </div>
        <div class="row mb-3">
          <div class="col-md-4">
            <strong>Hotend Temperature:</strong> <span id="hotendTemp">0째C</span>
          </div>
          <div class="col-md-4">
            <strong>Bed Temperature:</strong> <span id="bedTemp">0째C</span>
          </div>
          <div class="col-md-4">
            <strong>Print Progress:</strong>
            <div id="printProgressContainer">
              <div id="printProgressBar"></div>
            </div>
            <span id="printProgressText">0%</span>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <strong>Current GCODE:</strong> <span id="currentGcode">None</span>
          </div>
        </div>
      </div>
    </div>

    <!-- GCODE Input Section -->
    <div class="card mb-4">
      <div class="card-header">
        Send GCODE
      </div>
      <div class="card-body">
        <div class="input-group">
          <input type="text" id="gcodeInput" class="form-control" placeholder="Enter GCODE command">
          <button id="sendGcodeButton" class="btn btn-success">Send</button>
        </div>
        <!-- Display response from serial device -->
        <div id="gcodeResponse" class="mt-3 alert alert-info" style="display: none;"></div>
      </div>
    </div>

    <!-- Premade Sequences Buttons -->
    <div class="card mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <span>Premade Sequences</span>
        <div>
          <button id="exportScriptsButton" class="btn btn-sm btn-outline-primary me-2">Export Scripts</button>
          <button id="importScriptsButton" class="btn btn-sm btn-outline-secondary">Import Scripts</button>
          <input type="file" id="importFileInput" accept=".json" style="display: none;">
        </div>
      </div>
      <div class="card-body">
        <div class="btn-group" role="group" aria-label="Premade Sequences" id="premadeSequencesGroup">
          <button type="button" class="btn btn-secondary premade-sequence" data-sequence="Home All Axes">
            Home All Axes
          </button>
          <button type="button" class="btn btn-secondary premade-sequence" data-sequence="Preheat PLA">
            Preheat PLA
          </button>
          <button type="button" class="btn btn-secondary premade-sequence" data-sequence="Start Print">
            Start Print
          </button>
          <!-- Custom Scripts will be appended here -->
        </div>
      </div>
    </div>

    <!-- Custom Script Section -->
    <div class="card mb-4" id="customScriptSection">
      <div class="card-header">
        Create Custom Script
      </div>
      <div class="card-body">
        <div class="mb-3">
          <label for="scriptName" class="form-label">Script Name</label>
          <input type="text" class="form-control" id="scriptName" placeholder="Enter script name">
        </div>
        <div class="mb-3">
          <label for="scriptGcodes" class="form-label">GCODE Commands</label>
          <textarea class="form-control" id="scriptGcodes" rows="5" placeholder="Enter GCODE commands, one per line"></textarea>
        </div>
        <button id="saveScriptButton" class="btn btn-primary">Save Script</button>
      </div>
    </div>

    <!-- CRON Scheduled Tasks Section -->
    <div class="card" id="cronTasksSection">
      <div class="card-header">
        CRON Scheduled Tasks
      </div>
      <div class="card-body">
        <div id="cronTasksList">
          <p>No scheduled tasks found.</p>
        </div>
      </div>
    </div>

  </div>

  <!-- Bootstrap JS Bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Main JavaScript
  <script src="js/gcoder.js"></script> -->

  <script>
  

// Global variables to store port and reader
let port;
let reader;

// Connect to the printer on button click
document.getElementById('connectButton').addEventListener('click', connectToPrinter);

  // Send GCODE button click
document.getElementById('sendGcodeButton').addEventListener('click', async () => {
    const gcodeInput = document.getElementById('gcodeInput').value;
    await sendGcode(gcodeInput);
});



// Function to connect to the printer
async function connectToPrinter() {
    try {
        port = await navigator.serial.requestPort(); // Request a port
        await port.open({ baudRate: 57600  }); // Open the port
        reader = port.readable.getReader(); // Get a reader to read responses
        console.log('Serial connection to:', port);
        // Update connection status
        document.getElementById('connectionStatus').innerText = 'Connected ';

        initializePrinterInfo();

    } catch (error) {
        console.error('Error connecting to printer:', error);
    }
}



// Function to send GCODE to the printer
async function sendGcode(gcode) {
    try {
        const encoder = new TextEncoder();
        const writer = port.writable.getWriter();
        const command = encoder.encode(gcode + '\n'); // Add newline for GCODE
        await writer.write(command);
        writer.releaseLock();
        
        // After sending GCODE, fetch the printer status
        await fetchPrinterStatus();
    } catch (error) {
        console.error('Error sending GCODE:', error);
    }
}

// Function to fetch printer status
async function fetchPrinterStatus() {
    try {
        // Send a command to get the status (this is device-specific)
        const encoder = new TextEncoder();
        const writer = port.writable.getWriter();
        const command = encoder.encode('M105\n'); // Example command to get temperature status

        await writer.write(command);
        writer.releaseLock();

        // Read the response
        const response = await reader.read();
        const decoder = new TextDecoder();
        const statusData = decoder.decode(response.value);
        console.log('Printer Status:', statusData);
        
        // Update UI with printer status
        document.getElementById('gcodeResponse').innerText = statusData; // Display response
        document.getElementById('gcodeResponse').style.display = 'block';

        // Parse statusData to update other UI elements like temperatures, status, etc.
        // Assuming statusData is formatted correctly, you would parse it here.
        // Example: if statusData is 'T:200.00 /0.00 B:60.00 /0.00', you could extract these values.
        const [hotendTemp, bedTemp] = statusData.match(/T:([\d\.]+)/)?.slice(1) || [0, 0];
        document.getElementById('hotendTemp').innerText = `${hotendTemp}째C`;
        document.getElementById('bedTemp').innerText = `${bedTemp}째C`;

    } catch (error) {
        console.error('Error fetching printer status:', error);
    }
}


// Fetch Printer Status periodically (optional)
async function initializePrinterInfo() {
    fetchPrinterStatus(); // Initial call
   // setInterval(fetchPrinterStatus, 5000); // Repeat every 5 seconds
}



  </script>

  <!-- Additional JavaScript if needed -->
</body>
</html>
